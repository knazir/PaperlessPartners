#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app           = require('../app'),
    debug         = require('debug')('paperlesspartners:server'),
    http          = require('http'),
    socketIO      = require('socket.io'),
    childProcess  = require('child_process'),
    phantomjs     = require('phantomjs-prebuilt');

/**
 * Get port from environment and store in Express.
 */
var port = process.env.PORT || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */
//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var server = app.listen(port, function() {
  console.log("Express server listening on port %d in %s mode", this.address().port, app.settings.env);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* Socket.io */
var io = socketIO.listen(server);

io.on('connection', (socket) => {
  console.log('Client connected to socket.');
  socket.on('disconnect', () => console.log('Client disconnected from socket.'));
});

setInterval(() => io.emit('time', new Date().toTimeString()), 1000);

// /* PhantomJS Setup */
// var binPath = phantomjs.path;
//
// app.post('/compile', function(req, res) {
//   var childArgs = [
//     path.join(__dirname, '../public/javascripts/server/collect.js'),
//     req.body.user,
//     req.body.password
//   ];
//
//   setInterval(function() {
//
//   }, 200);
//
//   var child = childProcess.execFile(binPath, childArgs, {
//     detached: true,
//     stdio: ['ignore', 1, 2]
//   });
//
//   child.unref();
//   child.stdout.on('data', function(data) {
//       emitter = req.body.user + '-' + req.body.password[0] + '-message';
//       io.emit(emitter, data);
//   });
//
//   res.send(200);
// });